// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: queries.sql

package dbsql

import (
	"context"
	"database/sql"
)

const createAssociado = `-- name: CreateAssociado :one
INSERT INTO associado(
	codigo, nome, endereco, numero, nascimento, salario, limite, empregador, cep, telres, telcom, cel, bairro, id, complemento, cidade, foto, rg, cpf, funcao, filiado, obs, id_situacao, data_filiacao, data_desfiliacao, email, tipo, codigo_isa, parcelas_permitidas, uf, celwatzap, token_associado, cartao_entregue, data_entreg_cartao, ultimo_mes, id_divisao, id_secretaria, localizacao)
	VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38) RETURNING codigo, nome, endereco, numero, nascimento, salario, limite, empregador, cep, telres, telcom, cel, bairro, id, complemento, cidade, foto, rg, cpf, funcao, filiado, obs, id_situacao, data_filiacao, data_desfiliacao, email, tipo, codigo_isa, parcelas_permitidas, uf, celwatzap, token_associado, cartao_entregue, data_entreg_cartao, ultimo_mes, id_divisao, id_secretaria, localizacao
`

type CreateAssociadoParams struct {
	Codigo             string
	Nome               sql.NullString
	Endereco           sql.NullString
	Numero             sql.NullString
	Nascimento         sql.NullTime
	Salario            sql.NullFloat64
	Limite             sql.NullFloat64
	Empregador         int32
	Cep                sql.NullString
	Telres             sql.NullString
	Telcom             sql.NullString
	Cel                sql.NullString
	Bairro             sql.NullString
	ID                 int64
	Complemento        sql.NullString
	Cidade             sql.NullString
	Foto               []byte
	Rg                 sql.NullString
	Cpf                sql.NullString
	Funcao             sql.NullInt32
	Filiado            sql.NullBool
	Obs                sql.NullString
	IDSituacao         sql.NullInt32
	DataFiliacao       sql.NullTime
	DataDesfiliacao    sql.NullTime
	Email              sql.NullString
	Tipo               sql.NullInt32
	CodigoIsa          sql.NullString
	ParcelasPermitidas sql.NullInt32
	Uf                 sql.NullString
	Celwatzap          sql.NullBool
	TokenAssociado     sql.NullString
	CartaoEntregue     sql.NullBool
	DataEntregCartao   sql.NullTime
	UltimoMes          sql.NullString
	IDDivisao          sql.NullInt32
	IDSecretaria       sql.NullInt32
	Localizacao        sql.NullString
}

func (q *Queries) CreateAssociado(ctx context.Context, arg CreateAssociadoParams) (Associado, error) {
	row := q.db.QueryRowContext(ctx, createAssociado,
		arg.Codigo,
		arg.Nome,
		arg.Endereco,
		arg.Numero,
		arg.Nascimento,
		arg.Salario,
		arg.Limite,
		arg.Empregador,
		arg.Cep,
		arg.Telres,
		arg.Telcom,
		arg.Cel,
		arg.Bairro,
		arg.ID,
		arg.Complemento,
		arg.Cidade,
		arg.Foto,
		arg.Rg,
		arg.Cpf,
		arg.Funcao,
		arg.Filiado,
		arg.Obs,
		arg.IDSituacao,
		arg.DataFiliacao,
		arg.DataDesfiliacao,
		arg.Email,
		arg.Tipo,
		arg.CodigoIsa,
		arg.ParcelasPermitidas,
		arg.Uf,
		arg.Celwatzap,
		arg.TokenAssociado,
		arg.CartaoEntregue,
		arg.DataEntregCartao,
		arg.UltimoMes,
		arg.IDDivisao,
		arg.IDSecretaria,
		arg.Localizacao,
	)
	var i Associado
	err := row.Scan(
		&i.Codigo,
		&i.Nome,
		&i.Endereco,
		&i.Numero,
		&i.Nascimento,
		&i.Salario,
		&i.Limite,
		&i.Empregador,
		&i.Cep,
		&i.Telres,
		&i.Telcom,
		&i.Cel,
		&i.Bairro,
		&i.ID,
		&i.Complemento,
		&i.Cidade,
		&i.Foto,
		&i.Rg,
		&i.Cpf,
		&i.Funcao,
		&i.Filiado,
		&i.Obs,
		&i.IDSituacao,
		&i.DataFiliacao,
		&i.DataDesfiliacao,
		&i.Email,
		&i.Tipo,
		&i.CodigoIsa,
		&i.ParcelasPermitidas,
		&i.Uf,
		&i.Celwatzap,
		&i.TokenAssociado,
		&i.CartaoEntregue,
		&i.DataEntregCartao,
		&i.UltimoMes,
		&i.IDDivisao,
		&i.IDSecretaria,
		&i.Localizacao,
	)
	return i, err
}

const deleteAssociado = `-- name: DeleteAssociado :exec
DELETE FROM empregador
	WHERE id=$1
`

func (q *Queries) DeleteAssociado(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAssociado, id)
	return err
}

const listAssociado = `-- name: ListAssociado :many
SELECT codigo, nome, endereco, numero, nascimento, salario, limite, empregador, cep, telres, telcom, cel, bairro, id, complemento, cidade, foto, rg, cpf, funcao, filiado, obs, id_situacao, data_filiacao, data_desfiliacao, email, tipo, codigo_isa, parcelas_permitidas, uf, celwatzap, token_associado, cartao_entregue, data_entreg_cartao, ultimo_mes, id_divisao, id_secretaria, localizacao FROM associado WHERE codigo = $1 LIMIT 1
`

func (q *Queries) ListAssociado(ctx context.Context, codigo string) ([]Associado, error) {
	rows, err := q.db.QueryContext(ctx, listAssociado, codigo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Associado
	for rows.Next() {
		var i Associado
		if err := rows.Scan(
			&i.Codigo,
			&i.Nome,
			&i.Endereco,
			&i.Numero,
			&i.Nascimento,
			&i.Salario,
			&i.Limite,
			&i.Empregador,
			&i.Cep,
			&i.Telres,
			&i.Telcom,
			&i.Cel,
			&i.Bairro,
			&i.ID,
			&i.Complemento,
			&i.Cidade,
			&i.Foto,
			&i.Rg,
			&i.Cpf,
			&i.Funcao,
			&i.Filiado,
			&i.Obs,
			&i.IDSituacao,
			&i.DataFiliacao,
			&i.DataDesfiliacao,
			&i.Email,
			&i.Tipo,
			&i.CodigoIsa,
			&i.ParcelasPermitidas,
			&i.Uf,
			&i.Celwatzap,
			&i.TokenAssociado,
			&i.CartaoEntregue,
			&i.DataEntregCartao,
			&i.UltimoMes,
			&i.IDDivisao,
			&i.IDSecretaria,
			&i.Localizacao,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAssociados = `-- name: ListAssociados :many
SELECT codigo, nome, endereco, numero, nascimento, salario, limite, empregador, cep, telres, telcom, cel, bairro, id, complemento, cidade, foto, rg, cpf, funcao, filiado, obs, id_situacao, data_filiacao, data_desfiliacao, email, tipo, codigo_isa, parcelas_permitidas, uf, celwatzap, token_associado, cartao_entregue, data_entreg_cartao, ultimo_mes, id_divisao, id_secretaria, localizacao FROM associado
`

func (q *Queries) ListAssociados(ctx context.Context) ([]Associado, error) {
	rows, err := q.db.QueryContext(ctx, listAssociados)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Associado
	for rows.Next() {
		var i Associado
		if err := rows.Scan(
			&i.Codigo,
			&i.Nome,
			&i.Endereco,
			&i.Numero,
			&i.Nascimento,
			&i.Salario,
			&i.Limite,
			&i.Empregador,
			&i.Cep,
			&i.Telres,
			&i.Telcom,
			&i.Cel,
			&i.Bairro,
			&i.ID,
			&i.Complemento,
			&i.Cidade,
			&i.Foto,
			&i.Rg,
			&i.Cpf,
			&i.Funcao,
			&i.Filiado,
			&i.Obs,
			&i.IDSituacao,
			&i.DataFiliacao,
			&i.DataDesfiliacao,
			&i.Email,
			&i.Tipo,
			&i.CodigoIsa,
			&i.ParcelasPermitidas,
			&i.Uf,
			&i.Celwatzap,
			&i.TokenAssociado,
			&i.CartaoEntregue,
			&i.DataEntregCartao,
			&i.UltimoMes,
			&i.IDDivisao,
			&i.IDSecretaria,
			&i.Localizacao,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDivisao = `-- name: ListDivisao :many
SELECT nome, cidade, id_divisao, descricao
	FROM divisao
`

func (q *Queries) ListDivisao(ctx context.Context) ([]Divisao, error) {
	rows, err := q.db.QueryContext(ctx, listDivisao)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Divisao
	for rows.Next() {
		var i Divisao
		if err := rows.Scan(
			&i.Nome,
			&i.Cidade,
			&i.IDDivisao,
			&i.Descricao,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAssociado = `-- name: UpdateAssociado :one
UPDATE associado
	SET codigo=$2, nome=$3, endereco=$4, numero=$5, nascimento=$6, salario=$7, limite=$8, empregador=$9, cep=$10, telres=$11, telcom=$12, cel=$13, bairro=$14, id=$15, complemento=$16, cidade=$17, foto=$18, rg=$19, cpf=$20, funcao=$21, filiado=$22, obs=$23, id_situacao=$24, data_filiacao=$25, data_desfiliacao=$26, email=$27, tipo=$28, codigo_isa=$29, parcelas_permitidas=$30, uf=$31, celwatzap=$32, token_associado=$33, cartao_entregue=$34, data_entreg_cartao=$35, ultimo_mes=$36, id_divisao=$37, id_secretaria=$38, localizacao=$39
	WHERE codigo=$1 RETURNING codigo, nome, endereco, numero, nascimento, salario, limite, empregador, cep, telres, telcom, cel, bairro, id, complemento, cidade, foto, rg, cpf, funcao, filiado, obs, id_situacao, data_filiacao, data_desfiliacao, email, tipo, codigo_isa, parcelas_permitidas, uf, celwatzap, token_associado, cartao_entregue, data_entreg_cartao, ultimo_mes, id_divisao, id_secretaria, localizacao
`

type UpdateAssociadoParams struct {
	Codigo             string
	Codigo_2           string
	Nome               sql.NullString
	Endereco           sql.NullString
	Numero             sql.NullString
	Nascimento         sql.NullTime
	Salario            sql.NullFloat64
	Limite             sql.NullFloat64
	Empregador         int32
	Cep                sql.NullString
	Telres             sql.NullString
	Telcom             sql.NullString
	Cel                sql.NullString
	Bairro             sql.NullString
	ID                 int64
	Complemento        sql.NullString
	Cidade             sql.NullString
	Foto               []byte
	Rg                 sql.NullString
	Cpf                sql.NullString
	Funcao             sql.NullInt32
	Filiado            sql.NullBool
	Obs                sql.NullString
	IDSituacao         sql.NullInt32
	DataFiliacao       sql.NullTime
	DataDesfiliacao    sql.NullTime
	Email              sql.NullString
	Tipo               sql.NullInt32
	CodigoIsa          sql.NullString
	ParcelasPermitidas sql.NullInt32
	Uf                 sql.NullString
	Celwatzap          sql.NullBool
	TokenAssociado     sql.NullString
	CartaoEntregue     sql.NullBool
	DataEntregCartao   sql.NullTime
	UltimoMes          sql.NullString
	IDDivisao          sql.NullInt32
	IDSecretaria       sql.NullInt32
	Localizacao        sql.NullString
}

func (q *Queries) UpdateAssociado(ctx context.Context, arg UpdateAssociadoParams) (Associado, error) {
	row := q.db.QueryRowContext(ctx, updateAssociado,
		arg.Codigo,
		arg.Codigo_2,
		arg.Nome,
		arg.Endereco,
		arg.Numero,
		arg.Nascimento,
		arg.Salario,
		arg.Limite,
		arg.Empregador,
		arg.Cep,
		arg.Telres,
		arg.Telcom,
		arg.Cel,
		arg.Bairro,
		arg.ID,
		arg.Complemento,
		arg.Cidade,
		arg.Foto,
		arg.Rg,
		arg.Cpf,
		arg.Funcao,
		arg.Filiado,
		arg.Obs,
		arg.IDSituacao,
		arg.DataFiliacao,
		arg.DataDesfiliacao,
		arg.Email,
		arg.Tipo,
		arg.CodigoIsa,
		arg.ParcelasPermitidas,
		arg.Uf,
		arg.Celwatzap,
		arg.TokenAssociado,
		arg.CartaoEntregue,
		arg.DataEntregCartao,
		arg.UltimoMes,
		arg.IDDivisao,
		arg.IDSecretaria,
		arg.Localizacao,
	)
	var i Associado
	err := row.Scan(
		&i.Codigo,
		&i.Nome,
		&i.Endereco,
		&i.Numero,
		&i.Nascimento,
		&i.Salario,
		&i.Limite,
		&i.Empregador,
		&i.Cep,
		&i.Telres,
		&i.Telcom,
		&i.Cel,
		&i.Bairro,
		&i.ID,
		&i.Complemento,
		&i.Cidade,
		&i.Foto,
		&i.Rg,
		&i.Cpf,
		&i.Funcao,
		&i.Filiado,
		&i.Obs,
		&i.IDSituacao,
		&i.DataFiliacao,
		&i.DataDesfiliacao,
		&i.Email,
		&i.Tipo,
		&i.CodigoIsa,
		&i.ParcelasPermitidas,
		&i.Uf,
		&i.Celwatzap,
		&i.TokenAssociado,
		&i.CartaoEntregue,
		&i.DataEntregCartao,
		&i.UltimoMes,
		&i.IDDivisao,
		&i.IDSecretaria,
		&i.Localizacao,
	)
	return i, err
}

const updateEmpregador = `-- name: UpdateEmpregador :one
UPDATE empregador
	SET id=$2, nome=$3, responsavel=$4, telefone=$5, abreviacao=$6, divisao=$7
	WHERE id=$1 RETURNING id, nome, responsavel, telefone, abreviacao, divisao
`

type UpdateEmpregadorParams struct {
	ID          int64
	ID_2        int64
	Nome        sql.NullString
	Responsavel sql.NullString
	Telefone    sql.NullString
	Abreviacao  sql.NullString
	Divisao     sql.NullInt32
}

func (q *Queries) UpdateEmpregador(ctx context.Context, arg UpdateEmpregadorParams) (Empregador, error) {
	row := q.db.QueryRowContext(ctx, updateEmpregador,
		arg.ID,
		arg.ID_2,
		arg.Nome,
		arg.Responsavel,
		arg.Telefone,
		arg.Abreviacao,
		arg.Divisao,
	)
	var i Empregador
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Responsavel,
		&i.Telefone,
		&i.Abreviacao,
		&i.Divisao,
	)
	return i, err
}
